// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext {
        compile_sdk_version = 31
        build_tools_version = '31.0.0'
        min_sdk_version = 21
        target_sdk_version = 29
        version_code = 1
        version_name = '1.0'

        java_version = JavaVersion.VERSION_11

        kotlin_version = '1.6.10'
        kotlin_coroutines_version = '1.6.0'

        appcompat_version = '1.3.0'
        core_ktx_version = '1.7.0'
        activity_version = '1.5.0-alpha01'

        lifecycle_version = '2.5.0-alpha01'
        nav_version = '2.5.0-alpha01'
        compose_version = '1.1.0'

        startup_version = '1.1.1'

        recyclerview_version = '1.2.1'

        coil_version = '1.4.0'

    }

    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven {
            url '/Users/xueya/StudioProjects/flutter_page/build/host/outputs/repo'
        }
        maven {
            url "https://storage.flutter-io.cn/download.flutter.io"
        }

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * 加固前打包流程
 */
task step1(dependsOn: ":resetFileFolder") {
    doLast {
        def output0 = rootProject.ext.packgeConfig.releasePath

        println("copy apk")
        copy {
            from('app/build/outputs/apk/release/')
            into(output0)
            include("app-release.apk")
        }
    }
}

/**
 * 加固后签名流程
 */
task step2(dependsOn: ":packer") {
    doFirst {
        def versionName = rootProject.ext.androidConfig.versionName
        def output0 = rootProject.ext.packgeConfig.releasePath
        def output4 = rootProject.ext.packgeConfig.channelPath

        println("build channel")
        copy {
            from "${output0}/channel"
            include("towords_${versionName}-*")
            rename("towords_(.*)-(.*).apk", "towords_\$2_\$1.apk")
            into output4
        }
        List<File> listOfFiles = fileTree(dir: "${output0}/channel").asList()
        delete {
            listOfFiles.each {
                file ->
                    println file.name
                    delete file
            }
        }
    }
}

task step2Windows(dependsOn: ":packerWindows") {
    doFirst {
        def versionName = rootProject.ext.androidConfig.versionName
        def output0 = rootProject.ext.packgeConfig.releasePath
        def output4 = rootProject.ext.packgeConfig.channelPath

        println("build channel")
        copy {
            from "${output0}/channel"
            include("towords_${versionName}-*")
            rename("towords_(.*)-(.*).apk", "towords_\$2_\$1.apk")
            into output4
        }
        List<File> listOfFiles = fileTree(dir: "${output0}/channel").asList()
        delete {
            listOfFiles.each {
                file ->
                    println file.name
                    delete file
            }
        }
    }
}

task resetFileFolder(dependsOn: "::app:assembleRelease") {
    doFirst {
        def output0 = rootProject.ext.packgeConfig.releasePath
        def output4 = rootProject.ext.packgeConfig.channelPath

        mkdir "${output0}"
        mkdir "${output4}"
        mkdir "${output0}/channel"

        println("cleanRelease")
        List<File> listOfFiles = fileTree(dir: output0).asList()
        listOfFiles.addAll(fileTree(dir: output4).asList())
        delete {
            listOfFiles.each {
                file ->
                    println file.name
                    delete file
            }
        }
    }
}

task packer(dependsOn: ":apksigner") {
    doFirst {
        def versionName = rootProject.ext.androidConfig.versionName
        def output0 = rootProject.ext.packgeConfig.releasePath
        exec {
            commandLine "java -jar packer-ng-2.0.1.jar generate --channels=@markets.txt --output=${output0}/channel ${output0}/towords_${versionName}.apk".split(" ")
        }
    }
}

task packerWindows(dependsOn: ":apksignerWindows") {
    doFirst {
        def versionName = rootProject.ext.androidConfig.versionName
        def output0 = rootProject.ext.packgeConfig.releasePath
        exec {
            commandLine "java -jar packer-ng-2.0.1.jar generate --channels=@markets.txt --output=${output0}/channel ${output0}/towords_${versionName}.apk".split(" ")
        }
    }
}

task apksigner(dependsOn: ":zipalign") {
    doFirst {
        def toolsPath = rootProject.ext.packgeConfig.toolsPath
        def versionName = rootProject.ext.androidConfig.versionName
        def output0 = rootProject.ext.packgeConfig.releasePath
        exec {
            commandLine "${toolsPath}/apksigner sign --ks key_store/key --ks-key-alias minimud_towords --ks-pass pass:2081101 --key-pass pass:2081101 --out ${output0}/towords_${versionName}.apk ${output0}/my-app-unsigned-aligned.apk".split(" ")
        }
    }
}

task apksignerWindows(dependsOn: ":zipalign") {
    doFirst {
        def toolsPath = rootProject.ext.packgeConfig.toolsPath
        def versionName = rootProject.ext.androidConfig.versionName
        def output0 = rootProject.ext.packgeConfig.releasePath
        exec {
            commandLine "${toolsPath}/apksigner.bat sign --ks key_store/key --ks-key-alias minimud_towords --ks-pass pass:2081101 --key-pass pass:2081101 --out ${output0}/towords_${versionName}.apk ${output0}/my-app-unsigned-aligned.apk".split(" ")
        }
    }
}

task zipalign {
    doFirst {
        def toolsPath = rootProject.ext.packgeConfig.toolsPath
        def versionName = rootProject.ext.androidConfig.versionName
        def versionCode = versionName.replace(".", "")
        def output0 = rootProject.ext.packgeConfig.releasePath
        exec {
            commandLine "${toolsPath}/zipalign -v -p 4 ${output0}/app-release_${versionCode}_jiagu.apk ${output0}/my-app-unsigned-aligned.apk".split(" ")
        }
    }
}

ext {

    debugKeyStoreFile = "../key_store/key"
    releaseKeyStoreFile = "../key_store/key"

    Properties properties = new Properties()
    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
    properties.load(inputStream)
    packgeConfig = [
            releasePath: properties.getProperty('releasePath'),
            channelPath: properties.getProperty('channelPath'),
            toolsPath  : properties.getProperty('toolsPath') + "/27.0.3",

    ]

    signToolPath = "/Users/xueya/Library/Android/sdk/build-tools/30.0.3"
    signOutputPathRoot = "/Users/xueya/Downloads/app_market"
    unSignOutput = "/Users/xueya/Downloads"
    channelToolPath = "/Users/xueya/Downloads/app_market/tools"
    channelPath = "/Users/xueya/Downloads/app_market/channel"

    abiv8 = "arm64-v8a"
    abiv7 = "armeabi-v7a"

    versionName = "3.6.0"

    student = [
            unSignNameV8  : "ed4d83e12580ed31e7a05c2c793eaeec.20230306164429.apk",
            unSignNameV7  : "2a4f1f8ac24af09644c39c14e80c8e11.20230306164509.apk",
            keyPath       : "/Users/xueya/StudioProjects/partnertrainingstudent/app/partnerTrainingStudent.jks",
            signOutputPath: "$signOutputPathRoot/sign/student/$versionName",
            packageName   : "com.xihang.partnertrainingstudent",
            channelPath   : "$channelPath/studentChannel.txt",
            output0       : "$signOutputPathRoot/student_$versionName",
            alias         : "partnerTrainingStudent",
            ks_pass       : "xihangpartnerTrainingStudent",
            key_pass      : "xihangpartnerTrainingStudent",
    ]
    teacher = [
            unSignNameV8  : "9795992e274c66ebd37be85df8b936c7.20230309115013.apk",
            unSignNameV7  : "2ad6206499a651a9059e1a9cca59f534.20230309115106.apk",
            keyPath       : "/Users/xueya/StudioProjects/partnertrainingteacher/app/partnerTrainingTeacher.jks",
            signOutputPath: "$signOutputPathRoot/sign/teacher/$versionName",
            packageName   : "com.xihang.partnertrainingteacher",
            channelPath   : "$channelPath/teacherChannel.txt",
            output0       : "$signOutputPathRoot/teacher_$versionName",
            alias         : "xihangpartnerTrainingTeacher",
            ks_pass       : "xihangpartnerTrainingTeacher",
            key_pass      : "xihangpartnerTrainingTeacher",
    ]


}

task student(dependsOn: ":channelStudentV8"){
    doFirst {
        println "学生端多渠道打包完成"
    }
}

task teacher(dependsOn: ":channelTeacherV8"){
    doFirst {
        println "老师端多渠道打包完成"
    }
}

task channelStudentV8(dependsOn: ":signStudentV8") {
    doFirst {
        def versionName = rootProject.ext.versionName
        def channelToolPath = rootProject.ext.channelToolPath
        def abiName = rootProject.ext.abiv8

        def channelPath = rootProject.ext.student.channelPath
        def signOutputPath = rootProject.ext.student.signOutputPath
        def packageName = rootProject.ext.student.packageName
        def output0 = rootProject.ext.student.output0

        exec {
            commandLine "java -jar ${channelToolPath}/VasDolly.jar put -c ${channelPath} ${signOutputPath}/${packageName}-v${versionName}-v${abiName}-sign.apk ${output0}".split(" ")
        }
    }
}

task channelStudentV7(dependsOn: ":signStudentV7") {
    doFirst {
        def versionName = rootProject.ext.versionName
        def channelToolPath = rootProject.ext.channelToolPath
        def abiName = rootProject.ext.abiv7

        def channelPath = rootProject.ext.student.channelPath
        def signOutputPath = rootProject.ext.student.signOutputPath
        def packageName = rootProject.ext.student.packageName
        def output0 = rootProject.ext.student.output0

        exec {
            commandLine "java -jar ${channelToolPath}/VasDolly.jar put -c ${channelPath} ${signOutputPath}/${packageName}-v${versionName}-v${abiName}-sign.apk ${output0}".split(" ")
        }
    }
}

task channelTeacherV8(dependsOn: ":signTeacherV8") {
    doFirst {
        def versionName = rootProject.ext.versionName
        def channelToolPath = rootProject.ext.channelToolPath
        def abiName = rootProject.ext.abiv8

        def channelPath = rootProject.ext.teacher.channelPath
        def signOutputPath = rootProject.ext.teacher.signOutputPath
        def packageName = rootProject.ext.teacher.packageName
        def output0 = rootProject.ext.teacher.output0

        exec {
            commandLine "java -jar ${channelToolPath}/VasDolly.jar put -c ${channelPath} ${signOutputPath}/${packageName}-v${versionName}-v${abiName}-sign.apk ${output0}".split(" ")
        }
    }
}

task channelTeacherV7(dependsOn: ":signTeacherV7") {
    doFirst {
        def versionName = rootProject.ext.versionName
        def channelToolPath = rootProject.ext.channelToolPath
        def abiName = rootProject.ext.abiv7

        def channelPath = rootProject.ext.teacher.channelPath
        def signOutputPath = rootProject.ext.teacher.signOutputPath
        def packageName = rootProject.ext.teacher.packageName
        def output0 = rootProject.ext.teacher.output0

        exec {
            commandLine "java -jar ${channelToolPath}/VasDolly.jar put -c ${channelPath} ${signOutputPath}/${packageName}-v${versionName}-v${abiName}-sign.apk ${output0}".split(" ")
        }
    }
}

task signStudentV8(dependsOn: ":channelStudentV7") {
    doFirst {
        def signToolPath = rootProject.ext.signToolPath
        def unSignOutput = rootProject.ext.unSignOutput
        def versionName = rootProject.ext.versionName
        def abiName = rootProject.ext.abiv8

        def keyPath = rootProject.ext.student.keyPath
        def signOutputPath = rootProject.ext.student.signOutputPath
        def packageName = rootProject.ext.student.packageName
        def unSignName = rootProject.ext.student.unSignNameV8

        def alias = rootProject.ext.student.alias
        def ks_pass = rootProject.ext.student.ks_pass
        def key_pass = rootProject.ext.student.key_pass

        exec {
            commandLine "${signToolPath}/apksigner sign --ks ${keyPath} --ks-key-alias ${alias} --ks-pass pass:${ks_pass} --key-pass pass:${key_pass} --out ${signOutputPath}/${packageName}-v${versionName}-v${abiName}-sign.apk ${unSignOutput}/${unSignName}".split(" ")
        }
    }
}

task signStudentV7(dependsOn: ":beforeStudentWork") {
    doFirst {
        def signToolPath = rootProject.ext.signToolPath
        def unSignOutput = rootProject.ext.unSignOutput
        def versionName = rootProject.ext.versionName
        def abiName = rootProject.ext.abiv7

        def keyPath = rootProject.ext.student.keyPath
        def signOutputPath = rootProject.ext.student.signOutputPath
        def packageName = rootProject.ext.student.packageName
        def unSignName = rootProject.ext.student.unSignNameV7

        def alias = rootProject.ext.student.alias
        def ks_pass = rootProject.ext.student.ks_pass
        def key_pass = rootProject.ext.student.key_pass

        exec {
            commandLine "${signToolPath}/apksigner sign --ks ${keyPath} --ks-key-alias ${alias} --ks-pass pass:${ks_pass} --key-pass pass:${key_pass} --out ${signOutputPath}/${packageName}-v${versionName}-v${abiName}-sign.apk ${unSignOutput}/${unSignName}".split(" ")
        }
    }
}

task signTeacherV8(dependsOn: ":channelTeacherV7") {
    doFirst {
        def signToolPath = rootProject.ext.signToolPath
        def unSignOutput = rootProject.ext.unSignOutput
        def versionName = rootProject.ext.versionName
        def abiName = rootProject.ext.abiv8

        def keyPath = rootProject.ext.teacher.keyPath
        def signOutputPath = rootProject.ext.teacher.signOutputPath
        def packageName = rootProject.ext.teacher.packageName
        def unSignName = rootProject.ext.teacher.unSignNameV8
        def alias = rootProject.ext.teacher.alias
        def ks_pass = rootProject.ext.teacher.ks_pass
        def key_pass = rootProject.ext.teacher.key_pass

        exec {
            commandLine "${signToolPath}/apksigner sign --ks ${keyPath} --ks-key-alias ${alias} --ks-pass pass:${ks_pass} --key-pass pass:${key_pass} --out ${signOutputPath}/${packageName}-v${versionName}-v${abiName}-sign.apk ${unSignOutput}/${unSignName}".split(" ")
        }
    }
}

task signTeacherV7(dependsOn: ":beforeTeacherWork") {
    doFirst {
        def signToolPath = rootProject.ext.signToolPath
        def unSignOutput = rootProject.ext.unSignOutput
        def versionName = rootProject.ext.versionName
        def abiName = rootProject.ext.abiv7

        def keyPath = rootProject.ext.teacher.keyPath
        def signOutputPath = rootProject.ext.teacher.signOutputPath
        def packageName = rootProject.ext.teacher.packageName
        def unSignName = rootProject.ext.teacher.unSignNameV7

        def alias = rootProject.ext.teacher.alias
        def ks_pass = rootProject.ext.teacher.ks_pass
        def key_pass = rootProject.ext.teacher.key_pass

        exec {
            commandLine "${signToolPath}/apksigner sign --ks ${keyPath} --ks-key-alias ${alias} --ks-pass pass:${ks_pass} --key-pass pass:${key_pass} --out ${signOutputPath}/${packageName}-v${versionName}-v${abiName}-sign.apk ${unSignOutput}/${unSignName}".split(" ")
        }
    }
}

task beforeStudentWork {
    doFirst {

        def signOutputPath = rootProject.ext.student.signOutputPath
        def output0 = rootProject.ext.student.output0

        mkdir "$signOutputPath"
        mkdir "$output0"

        List<File> listOfSignFiles = fileTree(dir: "$signOutputPath").asList()
        List<File> listOfChannelFiles = fileTree(dir: "$output0").asList()

        delete {
            listOfSignFiles.each {
                file ->
                    println file.name
                    delete file
            }
            listOfChannelFiles.each {
                file ->
                    println file.name
                    delete file
            }
        }
    }
}

task beforeTeacherWork {
    doFirst {

        def signOutputPath = rootProject.ext.teacher.signOutputPath
        def output0 = rootProject.ext.teacher.output0

        mkdir "$signOutputPath"
        mkdir "$output0"

        List<File> listOfSignFiles = fileTree(dir: "$signOutputPath").asList()
        List<File> listOfChannelFiles = fileTree(dir: "$output0").asList()

        delete {
            listOfSignFiles.each {
                file ->
                    println file.name
                    delete file
            }
            listOfChannelFiles.each {
                file ->
                    println file.name
                    delete file
            }
        }
    }
}
